name: CI/CD Monorepo

permissions:
  contents: read

on:
  push:
    branches:
      - master
      - develop
  pull_request:
    branches:
      - master
      - develop

jobs:

  # ========================================================
  # Setup / Cache dependencies
  # ========================================================
  setup:
    runs-on: ubuntu-latest
    outputs:
      cache-hit: ${{ steps.cache-deps.outputs.cache-hit }}
    steps:
      - uses: actions/checkout@v4
      - id: cache-deps
        uses: actions/cache@v3
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}

  # ========================================================
  # Lint all projects
  # ========================================================
  lint:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      - uses: pnpm/action-setup@v2
        with:
          version: 8
      - name: Install dependencies
        run: pnpm install
      - name: Run ESLint
        run: pnpm lint

  # ========================================================
  # Backend tests (matrix: api-gateway, worker-service, ai-service)
  # ========================================================
  test-backend:
    runs-on: ubuntu-latest
    needs: setup
    strategy:
      matrix:
        service: [api-gateway, worker-service, ai-service]
    services:
      postgres:
        image: postgres:15
        ports: [5432:5432]
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: testdb
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

      redis:
        image: redis:7
        ports: [6379:6379]
      options: >-
        --health-cmd="redis-cli ping"
        --health-interval=10s
        --health-timeout=5s
        --health-retries=5

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      - uses: pnpm/action-setup@v2
        with:
          version: 8
      - name: Install dependencies
        run: pnpm install
      - name: Run Jest tests
        working-directory: ./backend/${{ matrix.service }}
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/testdb
          REDIS_URL: redis://localhost:6379
        run: |
          echo "Running tests for ${{ matrix.service }}..."
          pnpm run test --if-present

  # ========================================================
  # Frontend tests (Next.js)
  # ========================================================
  # ========================================================
  # Security scanning with Snyk
  # ========================================================
  security-scan:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      - uses: pnpm/action-setup@v2
        with:
          version: 8
      - name: Install dependencies
        run: pnpm install
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: test
          args: --all-projects --sarif-file-output=snyk.sarif
      - name: Upload Snyk results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: snyk.sarif

  test-frontend:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      - uses: pnpm/action-setup@v2
        with:
          version: 8
      - name: Install dependencies
        run: pnpm install
      - name: Run Jest tests
        working-directory: ./frontend
        run: pnpm exec jest --if-present

  # ========================================================
  # Docker build & push (backend + ai)
  # ========================================================
  docker-build-push:
    runs-on: ubuntu-latest
    needs: [lint, test-backend, test-frontend]
    steps:
      - uses: actions/checkout@v4
      - name: Log in to GitHub Container Registry
        run: echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Build Docker images
        run: |
          docker build -t ghcr.io/${{ github.repository }}/api-gateway:latest ./backend/api-gateway
          docker build -t ghcr.io/${{ github.repository }}/worker-service:latest ./backend/worker-service
          docker build -t ghcr.io/${{ github.repository }}/ai-service:latest ./backend/ai-service

      - name: Push Docker images
        run: |
          docker push ghcr.io/${{ github.repository }}/api-gateway:latest
          docker push ghcr.io/${{ github.repository }}/worker-service:latest
          docker push ghcr.io/${{ github.repository }}/ai-service:latest

  # ========================================================
  # Deployment (conditional: staging vs production)
  # ========================================================
  deploy:
    runs-on: ubuntu-latest
    needs: [docker-build-push]
    steps:
      - uses: actions/checkout@v4

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_KEY" | tr -d '\r' > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H $SERVER_HOST >> ~/.ssh/known_hosts
        env:
          SSH_KEY: ${{ secrets.SERVER_SSH_KEY }}
          SERVER_HOST: ${{ secrets.SERVER_HOST }}

      - name: Deploy to staging (develop branch)
        if: github.ref == 'refs/heads/develop'
        env:
          SERVER_USER: ${{ secrets.SERVER_USER_DEV }}
          SERVER_HOST: ${{ secrets.SERVER_HOST_DEV }}
        run: |
          ssh -i ~/.ssh/id_rsa $SERVER_USER@$SERVER_HOST "bash -s" < ./scripts/deploy-staging.sh

      - name: Deploy to production (master branch)
        if: github.ref == 'refs/heads/master'
        env:
          SERVER_USER: ${{ secrets.SERVER_USER_PROD }}
          SERVER_HOST: ${{ secrets.SERVER_HOST_PROD }}
        run: |
          ssh -i ~/.ssh/id_rsa $SERVER_USER@$SERVER_HOST "bash -s" < ./scripts/deploy-prod.sh
